---
import Header from '../components/Header.astro';
import Footer from "../components/Footer.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<meta name="generator" content={Astro.generator} />
		<title>{ title }</title>
	</head>
	<script>
		if ("scrollRestoration" in history) {
			document.addEventListener("astro:before-preparation", (event) => {
				// only cache the scroll position if we are navigating AWAY from "/"
				// and TO a page under "/projects/*"
				// @ts-ignore
				if (event.from.pathname === "/" && event.to.pathname.includes("/projects/")) {
					sessionStorage.setItem("scrollPosition", JSON.stringify(window.scrollY));
				}
			});

			document.addEventListener("astro:before-swap", (event) => {
				// @ts-ignore
				const shouldRestore = event.from.pathname.includes("/projects/") && event.to.pathname === "/";
				// @ts-ignore
				const shouldPreserve = event.from.pathname === "/" && event.to.pathname.includes("/projects/");
				if (!shouldRestore && !shouldPreserve) {
					sessionStorage.removeItem("scrollPosition");
				}
			})

			document.addEventListener("astro:after-swap", (event) => {
				// only restore scroll position if we are navigating AWAY from "/projects/*"
				// and TO the root page "/"
				const scrollPos = sessionStorage.getItem("scrollPosition");
				if (scrollPos && location.pathname === "/") {
					window.scrollTo(0, JSON.parse(scrollPos));
					sessionStorage.removeItem("scrollPosition");
				}

				history.scrollRestoration = "auto";
			});
		}

		history.scrollRestoration = "auto";
	</script>
	<body class="bg-slate-900 text-white pc:w-[60%] w-[90%] left-[5%] pc:left-[20%] relative">
		<Header />
		<br />
		<div class="px-5">
			<slot />
		</div>
		<br />
		<Footer />
	</body>
</html>

<ViewTransitions />

<style is:global>
	:root {
		color-scheme: dark;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}

	/** the class below is used to style the post/project markdown files */
	.prose {
		h2 {
			text-align: left;
			font-size: xx-large;
			font-weight: 600;
			margin-bottom: 5px;
			line-height: 3rem;
		}

		/* h2, p {
			color: #f9f7ed;
		} */

		p {
			margin-bottom: 25px;
			line-height: 1.75rem;
			font-size: 1.25rem;
		}

		a {
			text-decoration: underline;
			text-underline-offset: 3px;
		}
		pre {
			padding: 20px;
			border-radius: 10px;
			margin: 20px 0px;
		}

		blockquote {
			margin-top: 20px;
			border-left: 5px solid #85bdd4;
			padding-left: 15px;
		}

		ul {
			list-style-type: disc;
			padding-left: 2rem;
			margin: 25px 0px;

			li {
				font-size: 1.25rem;
			}
		}

		code {
			background-color: #24273a;
			padding: 3px 4px;
			border-radius: 5px;
		}
	}
</style>
